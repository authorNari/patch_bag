Index: gc.c
===================================================================
--- gc.c	(リビジョン 22947)
+++ gc.c	(作業コピー)
@@ -102,6 +102,7 @@
     int have_finalize;
     size_t allocate_increase;
     size_t allocate_limit;
+    VALUE count_objects;
 } gc_profile_record;
 
 static double
@@ -140,6 +141,8 @@
 #endif
 }
 
+static VALUE count_objects_for_node_type(int argc, VALUE *argv, VALUE os);
+
 #define GC_PROF_TIMER_START do {\
 	if (objspace->profile.run) {\
 	    if (!objspace->profile.record) {\
@@ -164,6 +167,8 @@
 	    gc_time = getrusage_time() - gc_time;\
 	    if (gc_time < 0) gc_time = 0;\
 	    objspace->profile.record[count].gc_time = gc_time;\
+	    objspace->profile.record[count].count_objects = count_objects_for_node_type(0,0,0); \
+            rb_gc_register_address(&objspace->profile.record[count].count_objects);\
 	    objspace->profile.count++;\
 	}\
     } while(0)
@@ -265,6 +270,7 @@
 	struct RRational rational;
 	struct RComplex complex;
     } as;
+    size_t lifetime;
 #ifdef GC_DEBUG
     char *file;
     int   line;
@@ -909,6 +915,7 @@
 
     while (p < pend) {
 	p->as.free.flags = 0;
+	p->lifetime = 0;
 	p->as.free.next = freelist;
 	freelist = p;
 	p++;
@@ -974,6 +981,8 @@
     freelist = freelist->as.free.next;
 
     MEMZERO((void*)obj, RVALUE, 1);
+
+    RANY(obj)->lifetime = 0;
 #ifdef GC_DEBUG
     RANY(obj)->file = rb_sourcefile();
     RANY(obj)->line = rb_sourceline();
@@ -1352,6 +1361,7 @@
     if (obj->as.basic.flags == 0) return;       /* free cell */
     if (obj->as.basic.flags & FL_MARK) return;  /* already marked */
     obj->as.basic.flags |= FL_MARK;
+    obj->lifetime++;
 
     if (lev > GC_LEVEL_MAX || (lev == 0 && stack_check())) {
 	if (!mark_stack_overflow) {
@@ -1649,6 +1659,7 @@
 {
     VALGRIND_MAKE_MEM_UNDEFINED((void*)p, sizeof(RVALUE));
     p->as.free.flags = 0;
+    p->lifetime = 0;
     p->as.free.next = freelist;
     freelist = p;
 }
@@ -2699,10 +2710,290 @@
         if (counts[i])
             rb_hash_aset(hash, type, SIZET2NUM(counts[i]));
     }
+    return hash;
+}
 
+static VALUE
+count_objects_for_node_type(int argc, VALUE *argv, VALUE os)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    size_t counts[T_MASK+NODE_LAST+1];
+    size_t freed = 0;
+    size_t total = 0;
+    size_t i;
+    VALUE hash;
+
+    if (rb_scan_args(argc, argv, "01", &hash) == 1) {
+        if (TYPE(hash) != T_HASH)
+            rb_raise(rb_eTypeError, "non-hash given");
+    }
+
+    for (i = 0; i <= T_MASK+NODE_LAST; i++) {
+        counts[i] = 0;
+    }
+
+    for (i = 0; i < heaps_used; i++) {
+        RVALUE *p, *pend;
+
+        p = heaps[i].slot; pend = p + heaps[i].limit;
+        for (;p < pend; p++) {
+            if (p->as.basic.flags) {
+                counts[BUILTIN_TYPE(p)]++;
+                if(BUILTIN_TYPE(p) == T_NODE)
+                    counts[T_MASK+nd_type(p)]++;
+            }
+            else {
+                freed++;
+            }
+        }
+        total += heaps[i].limit;
+    }
+
+    if (hash == Qnil) {
+        hash = rb_hash_new();
+    }
+    else if (!RHASH_EMPTY_P(hash)) {
+        st_foreach(RHASH_TBL(hash), set_zero, hash);
+    }
+    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
+    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
+
+    for (i = 0; i < T_MASK; i++) {
+        VALUE type;
+        switch (i) {
+#define COUNT_TYPE(t) case t: type = ID2SYM(rb_intern(#t)); break;
+	    COUNT_TYPE(T_NONE);
+	    COUNT_TYPE(T_OBJECT);
+	    COUNT_TYPE(T_CLASS);
+	    COUNT_TYPE(T_MODULE);
+	    COUNT_TYPE(T_FLOAT);
+	    COUNT_TYPE(T_STRING);
+	    COUNT_TYPE(T_REGEXP);
+	    COUNT_TYPE(T_ARRAY);
+	    COUNT_TYPE(T_HASH);
+	    COUNT_TYPE(T_STRUCT);
+	    COUNT_TYPE(T_BIGNUM);
+	    COUNT_TYPE(T_FILE);
+	    COUNT_TYPE(T_DATA);
+	    COUNT_TYPE(T_MATCH);
+	    COUNT_TYPE(T_COMPLEX);
+	    COUNT_TYPE(T_RATIONAL);
+	    COUNT_TYPE(T_NIL);
+	    COUNT_TYPE(T_TRUE);
+	    COUNT_TYPE(T_FALSE);
+	    COUNT_TYPE(T_SYMBOL);
+	    COUNT_TYPE(T_FIXNUM);
+	    COUNT_TYPE(T_UNDEF);
+	    COUNT_TYPE(T_NODE);
+	    COUNT_TYPE(T_ICLASS);
+	    COUNT_TYPE(T_ZOMBIE);
+          default:              type = INT2NUM(i); break;
+        }
+        if (counts[i])
+            rb_hash_aset(hash, type, SIZET2NUM(counts[i]));
+    }
+    for (i = 0; i <= (NODE_LAST-T_MASK); i++) {
+        VALUE type;
+        int key = i+T_MASK;
+        switch (i) {
+            COUNT_TYPE(NODE_METHOD);
+            COUNT_TYPE(NODE_FBODY);
+            COUNT_TYPE(NODE_CFUNC);
+            COUNT_TYPE(NODE_SCOPE);
+            COUNT_TYPE(NODE_BLOCK);
+            COUNT_TYPE(NODE_IF);
+            COUNT_TYPE(NODE_CASE);
+            COUNT_TYPE(NODE_WHEN);
+            COUNT_TYPE(NODE_OPT_N);
+            COUNT_TYPE(NODE_WHILE);
+            COUNT_TYPE(NODE_UNTIL);
+            COUNT_TYPE(NODE_ITER);
+            COUNT_TYPE(NODE_FOR);
+            COUNT_TYPE(NODE_BREAK);
+            COUNT_TYPE(NODE_NEXT);
+            COUNT_TYPE(NODE_REDO);
+            COUNT_TYPE(NODE_RETRY);
+            COUNT_TYPE(NODE_BEGIN);
+            COUNT_TYPE(NODE_RESCUE);
+            COUNT_TYPE(NODE_RESBODY);
+            COUNT_TYPE(NODE_ENSURE);
+            COUNT_TYPE(NODE_AND);
+            COUNT_TYPE(NODE_OR);
+            COUNT_TYPE(NODE_MASGN);
+            COUNT_TYPE(NODE_LASGN);
+            COUNT_TYPE(NODE_DASGN);
+            COUNT_TYPE(NODE_DASGN_CURR);
+            COUNT_TYPE(NODE_GASGN);
+            COUNT_TYPE(NODE_IASGN);
+            COUNT_TYPE(NODE_IASGN2);
+            COUNT_TYPE(NODE_CDECL);
+            COUNT_TYPE(NODE_CVASGN);
+            COUNT_TYPE(NODE_CVDECL);
+            COUNT_TYPE(NODE_OP_ASGN1);
+            COUNT_TYPE(NODE_OP_ASGN2);
+            COUNT_TYPE(NODE_OP_ASGN_AND);
+            COUNT_TYPE(NODE_OP_ASGN_OR);
+            COUNT_TYPE(NODE_CALL);
+            COUNT_TYPE(NODE_FCALL);
+            COUNT_TYPE(NODE_VCALL);
+            COUNT_TYPE(NODE_SUPER);
+            COUNT_TYPE(NODE_ZSUPER);
+            COUNT_TYPE(NODE_ARRAY);
+            COUNT_TYPE(NODE_ZARRAY);
+            COUNT_TYPE(NODE_VALUES);
+            COUNT_TYPE(NODE_HASH);
+            COUNT_TYPE(NODE_RETURN);
+            COUNT_TYPE(NODE_YIELD);
+            COUNT_TYPE(NODE_LVAR);
+            COUNT_TYPE(NODE_DVAR);
+            COUNT_TYPE(NODE_GVAR);
+            COUNT_TYPE(NODE_IVAR);
+            COUNT_TYPE(NODE_CONST);
+            COUNT_TYPE(NODE_CVAR);
+            COUNT_TYPE(NODE_NTH_REF);
+            COUNT_TYPE(NODE_BACK_REF);
+            COUNT_TYPE(NODE_MATCH);
+            COUNT_TYPE(NODE_MATCH2);
+            COUNT_TYPE(NODE_MATCH3);
+            COUNT_TYPE(NODE_LIT);
+            COUNT_TYPE(NODE_STR);
+            COUNT_TYPE(NODE_DSTR);
+            COUNT_TYPE(NODE_XSTR);
+            COUNT_TYPE(NODE_DXSTR);
+            COUNT_TYPE(NODE_EVSTR);
+            COUNT_TYPE(NODE_DREGX);
+            COUNT_TYPE(NODE_DREGX_ONCE);
+            COUNT_TYPE(NODE_ARGS);
+            COUNT_TYPE(NODE_ARGS_AUX);
+            COUNT_TYPE(NODE_OPT_ARG);
+            COUNT_TYPE(NODE_POSTARG);
+            COUNT_TYPE(NODE_ARGSCAT);
+            COUNT_TYPE(NODE_ARGSPUSH);
+            COUNT_TYPE(NODE_SPLAT);
+            COUNT_TYPE(NODE_TO_ARY);
+            COUNT_TYPE(NODE_BLOCK_ARG);
+            COUNT_TYPE(NODE_BLOCK_PASS);
+            COUNT_TYPE(NODE_DEFN);
+            COUNT_TYPE(NODE_DEFS);
+            COUNT_TYPE(NODE_ALIAS);
+            COUNT_TYPE(NODE_VALIAS);
+            COUNT_TYPE(NODE_UNDEF);
+            COUNT_TYPE(NODE_CLASS);
+            COUNT_TYPE(NODE_MODULE);
+            COUNT_TYPE(NODE_SCLASS);
+            COUNT_TYPE(NODE_COLON2);
+            COUNT_TYPE(NODE_COLON3);
+            COUNT_TYPE(NODE_DOT2);
+            COUNT_TYPE(NODE_FLIP2);
+            COUNT_TYPE(NODE_FLIP3);
+            COUNT_TYPE(NODE_ATTRSET);
+            COUNT_TYPE(NODE_SELF);
+            COUNT_TYPE(NODE_NIL);
+            COUNT_TYPE(NODE_TRUE);
+            COUNT_TYPE(NODE_FALSE);
+            COUNT_TYPE(NODE_ERRINFO);
+            COUNT_TYPE(NODE_DEFINED);
+            COUNT_TYPE(NODE_POSTEXE);
+            COUNT_TYPE(NODE_ALLOCA);
+            COUNT_TYPE(NODE_BMETHOD);
+            COUNT_TYPE(NODE_MEMO);
+            COUNT_TYPE(NODE_IFUNC);
+            COUNT_TYPE(NODE_DSYM);
+            COUNT_TYPE(NODE_ATTRASGN);
+            COUNT_TYPE(NODE_PRELUDE);
+            COUNT_TYPE(NODE_LAMBDA);
+            COUNT_TYPE(NODE_OPTBLOCK);
+            COUNT_TYPE(NODE_LAST);
+#undef COUNT_TYPE
+        default:              type = INT2NUM(i); break;
+        }
+        if (counts[key])
+            rb_hash_aset(hash, type, SIZET2NUM(counts[key]));
+    }
     return hash;
 }
 
+static VALUE
+count_object_lifetimes(int argc, VALUE *argv, VALUE os)
+{
+    rb_objspace_t *objspace = &rb_objspace;
+    size_t counts[T_MASK+1];
+    size_t counts2[T_MASK+1];
+    size_t freed = 0;
+    size_t total = 0;
+    size_t i;
+    VALUE hash;
+
+    if (rb_scan_args(argc, argv, "01", &hash) == 1) {
+        if (TYPE(hash) != T_HASH)
+            rb_raise(rb_eTypeError, "non-hash given");
+    }
+
+    for (i = 0; i <= T_MASK; i++) {
+        counts[i] = 0;
+        counts2[i] = 0;
+    }
+
+    for (i = 0; i < heaps_used; i++) {
+        RVALUE *p, *pend;
+
+        p = heaps[i].slot; pend = p + heaps[i].limit;
+        for (;p < pend; p++) {
+            if (p->as.basic.flags) {
+                counts[BUILTIN_TYPE(p)]++;
+                counts2[BUILTIN_TYPE(p)] += p->lifetime;
+            }
+        }
+    }
+
+    if (hash == Qnil) {
+        hash = rb_hash_new();
+    }
+    else if (!RHASH_EMPTY_P(hash)) {
+        st_foreach(RHASH_TBL(hash), set_zero, hash);
+    }
+    rb_hash_aset(hash, ID2SYM(rb_intern("TOTAL")), SIZET2NUM(total));
+    rb_hash_aset(hash, ID2SYM(rb_intern("FREE")), SIZET2NUM(freed));
+
+    for (i = 0; i <= T_MASK; i++) {
+        VALUE type;
+        switch (i) {
+#define COUNT_TYPE(t) case t: type = ID2SYM(rb_intern(#t)); break;
+	    COUNT_TYPE(T_NONE);
+	    COUNT_TYPE(T_OBJECT);
+	    COUNT_TYPE(T_CLASS);
+	    COUNT_TYPE(T_MODULE);
+	    COUNT_TYPE(T_FLOAT);
+	    COUNT_TYPE(T_STRING);
+	    COUNT_TYPE(T_REGEXP);
+	    COUNT_TYPE(T_ARRAY);
+	    COUNT_TYPE(T_HASH);
+	    COUNT_TYPE(T_STRUCT);
+	    COUNT_TYPE(T_BIGNUM);
+	    COUNT_TYPE(T_FILE);
+	    COUNT_TYPE(T_DATA);
+	    COUNT_TYPE(T_MATCH);
+	    COUNT_TYPE(T_COMPLEX);
+	    COUNT_TYPE(T_RATIONAL);
+	    COUNT_TYPE(T_NIL);
+	    COUNT_TYPE(T_TRUE);
+	    COUNT_TYPE(T_FALSE);
+	    COUNT_TYPE(T_SYMBOL);
+	    COUNT_TYPE(T_FIXNUM);
+	    COUNT_TYPE(T_UNDEF);
+	    COUNT_TYPE(T_NODE);
+	    COUNT_TYPE(T_ICLASS);
+	    COUNT_TYPE(T_ZOMBIE);
+#undef COUNT_TYPE
+          default:              type = INT2NUM(i); break;
+        }
+        if (counts[i]) {
+            rb_hash_aset(hash, type, SIZET2NUM(counts2[i]/counts[i]));
+        }
+    }
+    return hash;
+}
+
 /*
  *  call-seq:
  *     GC.count -> Integer
@@ -2770,6 +3061,7 @@
         rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_USE_SIZE")), rb_uint2inum(objspace->profile.record[i].heap_use_size));
         rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_SIZE")), rb_uint2inum(objspace->profile.record[i].heap_total_size));
         rb_hash_aset(prof, ID2SYM(rb_intern("HEAP_TOTAL_OBJECTS")), rb_uint2inum(objspace->profile.record[i].heap_total_objects));
+        rb_hash_aset(prof, ID2SYM(rb_intern("COUNT_OBJECTS")), objspace->profile.record[i].count_objects);
 #if GC_PROFILE_MORE_DETAIL
         rb_hash_aset(prof, ID2SYM(rb_intern("GC_MARK_TIME")), DBL2NUM(objspace->profile.record[i].gc_mark_time));
         rb_hash_aset(prof, ID2SYM(rb_intern("GC_SWEEP_TIME")), DBL2NUM(objspace->profile.record[i].gc_sweep_time));
@@ -2866,7 +3158,6 @@
     return Qnil;
 }
 
-
 /*
  *  The <code>GC</code> module provides an interface to Ruby's mark and
  *  sweep garbage collection mechanism. Some of the underlying methods
@@ -2895,6 +3186,7 @@
     rb_define_singleton_method(rb_mProfiler, "clear", gc_profile_clear, 0);
     rb_define_singleton_method(rb_mProfiler, "result", gc_profile_result, 0);
     rb_define_singleton_method(rb_mProfiler, "report", gc_profile_report, -1);
+    rb_define_singleton_method(rb_mProfiler, "data", gc_profile_record_get, 0);
 
     rb_mObSpace = rb_define_module("ObjectSpace");
     rb_define_module_function(rb_mObSpace, "each_object", os_each_obj, -1);
@@ -2915,6 +3207,8 @@
     rb_define_method(rb_mKernel, "object_id", rb_obj_id, 0);
 
     rb_define_module_function(rb_mObSpace, "count_objects", count_objects, -1);
+    rb_define_module_function(rb_mObSpace, "count_objects_for_node_type", count_objects_for_node_type, -1);
+    rb_define_module_function(rb_mObSpace, "count_object_lifetimes", count_object_lifetimes, -1);
 
 #if CALC_EXACT_MALLOC_SIZE
     rb_define_singleton_method(rb_mGC, "malloc_allocated_size", gc_malloc_allocated_size, 0);
