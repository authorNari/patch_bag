Index: common.mk
===================================================================
--- common.mk	(リビジョン 18028)
+++ common.mk	(作業コピー)
@@ -480,7 +480,7 @@
   {$(VPATH)}regex.h {$(VPATH)}oniguruma.h {$(VPATH)}io.h \
   {$(VPATH)}encoding.h {$(VPATH)}vm_core.h {$(VPATH)}debug.h \
   {$(VPATH)}vm_opts.h {$(VPATH)}id.h {$(VPATH)}thread_$(THREAD_MODEL).h \
-  {$(VPATH)}gc.h {$(VPATH)}eval_intern.h
+  {$(VPATH)}gc.h {$(VPATH)}eval_intern.h {$(VPATH)}gc_lazysweep.c
 hash.$(OBJEXT): {$(VPATH)}hash.c $(RUBY_H_INCLUDES) \
   {$(VPATH)}st.h {$(VPATH)}util.h {$(VPATH)}signal.h
 inits.$(OBJEXT): {$(VPATH)}inits.c $(RUBY_H_INCLUDES) \
Index: gc.c
===================================================================
--- gc.c	(リビジョン 18028)
+++ gc.c	(作業コピー)
@@ -129,10 +129,17 @@
 #pragma pack(pop)
 #endif
 
+enum slot_state {
+    GARBAGE = 0x00,
+    NEED_MARK = 0x01,
+    NEED_SWEEP  = 0x02,
+};
+
 struct heaps_slot {
     void *membase;
     RVALUE *slot;
     int limit;
+    enum slot_state state;
 };
 
 #define HEAP_MIN_SLOTS 10000
@@ -162,10 +169,17 @@
 	RVALUE *freelist;
 	RVALUE *range[2];
 	RVALUE *freed;
+	size_t live;
+	size_t dead;
+	size_t do_heap_free;
+	size_t sweep_index;
+	size_t sweep_increment;
     } heap;
     struct {
 	int dont_gc;
 	int during_gc;
+	int during_gc_sweep;
+	int need_slot_free;
     } flags;
     struct {
 	st_table *table;
@@ -179,6 +193,7 @@
     struct gc_list *global_list;
     unsigned int count;
     int gc_stress;
+    VALUE gc_profile;
 } rb_objspace_t;
 
 #if defined(ENABLE_VM_OBJSPACE) && ENABLE_VM_OBJSPACE
@@ -200,8 +215,15 @@
 #define himem			objspace->heap.range[1]
 #define heaps_inc		objspace->heap.increment
 #define heaps_freed		objspace->heap.freed
+#define live			objspace->heap.live
+#define dead			objspace->heap.dead
+#define do_heap_free		objspace->heap.do_heap_free
+#define heaps_sweep_index	objspace->heap.sweep_index
+#define heaps_sweep_inc 	objspace->heap.sweep_increment
 #define dont_gc 		objspace->flags.dont_gc
 #define during_gc		objspace->flags.during_gc
+#define during_gc_sweep		objspace->flags.during_gc_sweep
+#define need_slot_free		objspace->flags.need_slot_free
 #define finalizer_table 	objspace->final.table
 #define deferred_final_list	objspace->final.deferred
 #define mark_stack		objspace->markstack.buffer
@@ -209,6 +231,7 @@
 #define mark_stack_overflow	objspace->markstack.overflow
 #define global_List		objspace->global_list
 #define ruby_gc_stress		objspace->gc_stress
+#define gc_profile		objspace->gc_profile
 
 #define need_call_final 	(finalizer_table && finalizer_table->num_entries)
 
@@ -249,7 +272,14 @@
 
 static void run_final(rb_objspace_t *objspace, VALUE obj);
 static int garbage_collect(rb_objspace_t *objspace);
+static void obj_free(rb_objspace_t *, VALUE);
+static void set_heaps_increment(rb_objspace_t *objspace);
+static int heaps_increment(rb_objspace_t *objspace);
+static void gc_marks(rb_objspace_t *objspace, rb_thread_t *th);
+static void free_unused_heaps(rb_objspace_t *objspace);
 
+#include "gc_lazysweep.c"
+
 void
 rb_global_variable(VALUE *var)
 {
@@ -333,7 +363,11 @@
 	    RUBY_CRITICAL(mem = malloc(size));
 	}
 	if (!mem) {
-	    rb_memerror();
+	    /* try again */
+	    if (garbage_collect(objspace)) {
+		RUBY_CRITICAL(mem = malloc(size));
+	    }
+	    if (!mem) rb_memerror();
 	}
     }
     malloc_increase += size;
@@ -365,14 +399,17 @@
     objspace->malloc_params.allocated_size -= size;
     ptr = (size_t *)ptr - 1;
 #endif
-
     RUBY_CRITICAL(mem = realloc(ptr, size));
     if (!mem) {
 	if (garbage_collect(objspace)) {
 	    RUBY_CRITICAL(mem = realloc(ptr, size));
 	}
 	if (!mem) {
-	    rb_memerror();
+	    /* try again */
+	    if (garbage_collect(objspace)) {
+		RUBY_CRITICAL(mem = realloc(ptr, size));
+	    }
+	    if (!mem) rb_memerror();
         }
     }
     malloc_increase += size;
@@ -559,6 +596,8 @@
     heaps_length = next_heaps_length;
 }
 
+#define RANY(o) ((RVALUE*)(o))
+
 static void
 assign_heap_slot(rb_objspace_t *objspace)
 {
@@ -602,6 +641,7 @@
     heaps[hi].membase = membase;
     heaps[hi].slot = p;
     heaps[hi].limit = objs;
+    heaps[hi].state = NEED_MARK;
     pend = p + objs;
     if (lomem == 0 || lomem > p) lomem = p;
     if (himem < pend) himem = pend;
@@ -613,6 +653,9 @@
 	freelist = p;
 	p++;
     }
+    if (hi < heaps_sweep_index) {
+	heaps_sweep_index++;
+    }
 }
 
 static void
@@ -655,15 +698,13 @@
     return Qfalse;
 }
 
-#define RANY(o) ((RVALUE*)(o))
-
 static VALUE
 rb_newobj_from_heap(rb_objspace_t *objspace)
 {
     VALUE obj;
 	
     if ((ruby_gc_stress && !ruby_disable_gc_stress) || !freelist) {
-    	if (!heaps_increment(objspace) && !garbage_collect(objspace)) {
+    	if (!garbage_collect_lazysweep(objspace)) {
 	    rb_memerror();
 	}
     }
@@ -1040,6 +1081,7 @@
     if (obj->as.basic.flags == 0) return;       /* free cell */
     if (obj->as.basic.flags & FL_MARK) return;  /* already marked */
     obj->as.basic.flags |= FL_MARK;
+    live++;
 
     if (lev > GC_LEVEL_MAX || (lev == 0 && ruby_stack_check())) {
 	if (!mark_stack_overflow) {
@@ -1075,6 +1117,7 @@
     if (obj->as.basic.flags == 0) return;       /* free cell */
     if (obj->as.basic.flags & FL_MARK) return;  /* already marked */
     obj->as.basic.flags |= FL_MARK;
+    live++;
 
   marking:
     if (FL_TEST(obj, FL_EXIVAR)) {
@@ -1323,8 +1366,6 @@
     }
 }
 
-static void obj_free(rb_objspace_t *, VALUE);
-
 static void
 finalize_list(rb_objspace_t *objspace, RVALUE *p)
 {
@@ -1334,13 +1375,13 @@
 	if (!FL_TEST(p, FL_SINGLETON)) { /* not freeing page */
             VALGRIND_MAKE_MEM_UNDEFINED((void*)p, sizeof(RVALUE));
 	    p->as.free.flags = 0;
-	    p->as.free.next = freelist;
-	    freelist = p;
 	}
 	p = tmp;
     }
 }
 
+void rb_gc_abort_threads(void);
+
 static void
 free_unused_heaps(rb_objspace_t *objspace)
 {
@@ -1348,7 +1389,7 @@
     RVALUE *last = 0;
 
     for (i = j = 1; j < heaps_used; i++) {
-	if (heaps[i].limit == 0) {
+	if (heaps[i].state == GARBAGE) {
 	    if (!last) {
 		last = heaps[i].membase;
 	    }
@@ -1361,6 +1402,7 @@
 	    if (i != j) {
 		heaps[j] = heaps[i];
 	    }
+	    heaps[j].state = NEED_MARK;
 	    j++;
 	}
     }
@@ -1373,15 +1415,16 @@
 	    free(last);
 	}
     }
+    need_slot_free = Qfalse;
 }
 
 static void
 gc_sweep(rb_objspace_t *objspace)
 {
     RVALUE *p, *pend, *final_list;
-    size_t freed = 0;
+    size_t freed = 0, free_min = 0;
     size_t i;
-    size_t live = 0, free_min = 0, do_heap_free = 0;
+    live = 0, do_heap_free = 0;
 
     do_heap_free = (heaps_used * HEAP_OBJ_LIMIT) * 0.65;
     free_min = (heaps_used * HEAP_OBJ_LIMIT)  * 0.2;
@@ -1394,79 +1437,84 @@
     final_list = deferred_final_list;
     deferred_final_list = 0;
     for (i = 0; i < heaps_used; i++) {
-	int n = 0;
-	RVALUE *free = freelist;
-	RVALUE *final = final_list;
+	if (heaps[i].state == NEED_SWEEP) {
+	    int n = 0;
+	    RVALUE *free = freelist;
+	    RVALUE *final = final_list;
 
-	p = heaps[i].slot; pend = p + heaps[i].limit;
-	while (p < pend) {
-	    if (!(p->as.basic.flags & FL_MARK)) {
-		if (p->as.basic.flags) {
-		    obj_free(objspace, (VALUE)p);
+	    p = heaps[i].slot; pend = p + heaps[i].limit;
+	    while (p < pend) {
+		if (!(p->as.basic.flags & FL_MARK)) {
+		    if (p->as.basic.flags) {
+			obj_free(objspace, (VALUE)p);
+		    }
+		    if (need_call_final && FL_TEST(p, FL_FINALIZE)) {
+			p->as.free.flags = FL_MARK; /* remain marked */
+			p->as.free.next = final_list;
+			final_list = p;
+		    }
+		    else {
+			VALGRIND_MAKE_MEM_UNDEFINED((void*)p, sizeof(RVALUE));
+			p->as.free.flags = 0;
+			p->as.free.next = freelist;
+			freelist = p;
+		    }
+		    n++;
 		}
-		if (need_call_final && FL_TEST(p, FL_FINALIZE)) {
-		    p->as.free.flags = FL_MARK; /* remain marked */
-		    p->as.free.next = final_list;
-		    final_list = p;
+		else if (RBASIC(p)->flags == FL_MARK) {
+		    /* objects to be finalized */
+		    /* do nothing remain marked */
 		}
 		else {
-                    VALGRIND_MAKE_MEM_UNDEFINED((void*)p, sizeof(RVALUE));
-		    p->as.free.flags = 0;
-		    p->as.free.next = freelist;
-		    freelist = p;
+		    RBASIC(p)->flags &= ~FL_MARK;
+		    live++;
 		}
-		n++;
+		p++;
 	    }
-	    else if (RBASIC(p)->flags == FL_MARK) {
-		/* objects to be finalized */
-		/* do nothing remain marked */
+	    if (n == heaps[i].limit && freed > do_heap_free) {
+		RVALUE *pp;
+
+		heaps[i].limit = 0;
+		heaps[i].state = GARBAGE;
+		need_slot_free = Qtrue;
+		for (pp = final_list; pp != final; pp = pp->as.free.next) {
+		    p->as.free.flags |= FL_SINGLETON; /* freeing page mark */
+		}
+		freelist = free;	/* cancel this page from freelist */
 	    }
 	    else {
-		RBASIC(p)->flags &= ~FL_MARK;
-		live++;
+		heaps[i].state = NEED_MARK;
+		freed += n;
 	    }
-	    p++;
 	}
-	if (n == heaps[i].limit && freed > do_heap_free) {
-	    RVALUE *pp;
-
-	    heaps[i].limit = 0;
-	    for (pp = final_list; pp != final; pp = pp->as.free.next) {
-		p->as.free.flags |= FL_SINGLETON; /* freeing page mark */
-	    }
-	    freelist = free;	/* cancel this page from freelist */
-	}
-	else {
-	    freed += n;
-	}
     }
     if (malloc_increase > malloc_limit) {
 	malloc_limit += (malloc_increase - malloc_limit) * (double)live / (live + freed);
 	if (malloc_limit < GC_MALLOC_LIMIT) malloc_limit = GC_MALLOC_LIMIT;
     }
     malloc_increase = 0;
-    if (freed < free_min) {
+    if ((dead + freed) < free_min) {
     	set_heaps_increment(objspace);
 	heaps_increment(objspace);
     }
     during_gc = 0;
+    heaps_sweep_index = heaps_used;
 
     /* clear finalization list */
     if (final_list) {
 	deferred_final_list = final_list;
 	return;
     }
-    free_unused_heaps(objspace);
+    if (need_slot_free) {
+	free_unused_heaps(objspace);
+    }
 }
 
 void
 rb_gc_force_recycle(VALUE p)
 {
-    rb_objspace_t *objspace = &rb_objspace;
     VALGRIND_MAKE_MEM_UNDEFINED((void*)p, sizeof(RVALUE));
     RANY(p)->as.free.flags = 0;
-    RANY(p)->as.free.next = freelist;
-    freelist = RANY(p);
 }
 
 static void
@@ -1620,8 +1668,6 @@
 #endif /* __human68k__ or DJGPP */
 #endif /* __GNUC__ */
 
-#define GC_NOTIFY 0
-
 void rb_vm_mark(void *ptr);
 
 static void
@@ -1667,30 +1713,23 @@
 
 void rb_gc_mark_encodings(void);
 
-static int
-garbage_collect(rb_objspace_t *objspace)
+static void
+setup_sweep(rb_objspace_t *objspace) {
+    size_t i;
+
+    for (i = 0; i < heaps_used; i++) {
+	heaps[i].state = NEED_SWEEP;
+    }
+}
+
+static void
+gc_marks(rb_objspace_t *objspace, rb_thread_t *th)
 {
     struct gc_list *list;
-    rb_thread_t *th = GET_THREAD();
 
-    if (GC_NOTIFY) printf("start garbage_collect()\n");
+    live = 0;
+    freelist = 0;
 
-    if (!heaps) {
-	return Qfalse;
-    }
-
-    if (dont_gc || during_gc) {
-	if (!freelist) {
-            if (!heaps_increment(objspace)) {
-                set_heaps_increment(objspace);
-                heaps_increment(objspace);
-            }
-	}
-	return Qtrue;
-    }
-    during_gc++;
-    objspace->count++;
-
     SET_STACK_END;
 
     init_mark_stack(objspace);
@@ -1707,6 +1746,7 @@
     rb_gc_mark_symbols();
     rb_gc_mark_encodings();
 
+
     /* mark protected global variables */
     for (list = global_List; list; list = list->next) {
 	rb_gc_mark_maybe(*list->varptr);
@@ -1732,8 +1772,58 @@
 	}
     }
 
+    set_lazy_sweep_params(objspace);
+    setup_sweep(objspace);
+}
+
+static int
+garbage_collect(rb_objspace_t *objspace)
+{
+    rb_thread_t *th = GET_THREAD();
+
+    PREPARE_GC_PROF;
+    GC_TIMER_START;
+
+    if (GC_NOTIFY) printf("start garbage_collect()\n");
+
+    if (!heaps) {
+	return Qfalse;
+    }
+
+    if (dont_gc || during_gc) {
+	if (!freelist) {
+            if (!heaps_increment(objspace)) {
+                set_heaps_increment(objspace);
+                heaps_increment(objspace);
+            }
+	}
+	return Qtrue;
+    }
+    during_gc++;
+    objspace->count++;
+
+    if (during_gc_sweep) {
+
+	GC_SWEEP_TIMER_START;
+	gc_sweep(objspace);
+	GC_SWEEP_TIMER_END;
+
+	GC_TIMER_END;
+	during_gc_sweep = Qfalse;
+	if (GC_NOTIFY) printf("end garbage_collect() but only sweep\n");
+	return Qtrue;
+    }
+
+    GC_MARK_TIMER_START;
+    gc_marks(objspace, th);
+    GC_MARK_TIMER_END;
+
+    GC_SWEEP_TIMER_START;
     gc_sweep(objspace);
+    GC_SWEEP_TIMER_END;
 
+    GC_TIMER_END;
+
     if (GC_NOTIFY) printf("end garbage_collect()\n");
     return Qtrue;
 }
@@ -1741,7 +1831,7 @@
 int
 rb_garbage_collect(void)
 {
-    return garbage_collect(&rb_objspace);
+    return garbage_collect_lazysweep(&rb_objspace);
 }
 
 void
@@ -1850,6 +1940,9 @@
 	p = heaps[i].slot; pend = p + heaps[i].limit;
 	for (;p < pend; p++) {
 	    if (p->as.basic.flags) {
+		if (!freelist && !heaps_increment(objspace)) {
+		    garbage_collect(objspace);
+		}
 		switch (BUILTIN_TYPE(p)) {
 		  case T_NONE:
 		  case T_ICLASS:
@@ -2034,7 +2127,9 @@
     if (p) {
 	finalize_list(objspace, p);
     }
-    free_unused_heaps(objspace);
+    if (need_slot_free) {
+	free_unused_heaps(objspace);
+    }
 }
 
 void
@@ -2106,7 +2201,7 @@
 rb_gc(void)
 {
     rb_objspace_t *objspace = &rb_objspace;
-    garbage_collect(objspace);
+    garbage_collect_lazysweep(objspace);
     gc_finalize_deferred(objspace);
 }
 
Index: gc.h
===================================================================
--- gc.h	(リビジョン 18028)
+++ gc.h	(作業コピー)
@@ -73,3 +73,4 @@
 #endif
 
 #endif /* RUBY_GC_H */
+
